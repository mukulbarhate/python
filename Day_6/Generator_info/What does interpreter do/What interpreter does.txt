def returnOdds(val):    # generator function
    print("inside generator function")
    for i in range(1,val+1):
        if(i%2!=0):
            print("before yield")
            yield i            # yield allows you to return generator 
            print("after yield")

This is basically what the Python interpreter does with the above code:

class It:	# just a fake name
     __iter__ method
		and

    # The next method will be called repeatedly by the 'for' loop
    # until it raises StopIteration.
    def next(self):
	# The logic which you have written must be implemented in some or the other way
       
        raise StopIteration


so what exactly interpreter does with your method is:


def returnOdds(val):    # generator function
    return It(val)

