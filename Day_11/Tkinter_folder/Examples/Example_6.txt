
from tkinter import *
from functools import partial
import tkinter.font as font

def validateLogin():
    myFont = font.Font(family='Helvetica',size=20)
    if(usernameEntry.get()=="scott" and passwordEntry.get()=="tiger"):
        resultlabel.config(fg="green",font=myFont)
        resultlabel["text"]="Valid User"
    else:
        resultlabel.config(fg="red",font=myFont)
        resultlabel["text"]="Invalid User"
	

#window
tkWindow = Tk()  
tkWindow.geometry('400x150')  
tkWindow.title('Tkinter Login Form - pythonexamples.org')

#username label and text entry box
usernameLabel = Label(tkWindow, text="User Name")
usernameLabel.grid(row=0, column=0)

usernameEntry = Entry(tkWindow)
usernameEntry.grid(row=0, column=1)   

#password label and password entry box
passwordLabel = Label(tkWindow,text="Password")
passwordLabel.grid(row=1, column=0)  

passwordEntry = Entry(tkWindow, show='*')
passwordEntry.grid(row=1, column=1)  

resultlabel=Label(tkWindow)
resultlabel.grid(row=6,column=0)


#login button
loginButton = Button(tkWindow, text="Login", command=validateLogin)
loginButton.grid(row=4, column=0)  



tkWindow.mainloop()

# ----------------------------------------- SAKE GAME --------------------------------------------

# import tkinter as tk
# import random
# import time

# # Constants
# WIDTH = 600
# HEIGHT = 400
# SNAKE_SIZE = 20
# DELAY = 0.1

# # Colors
# BG_COLOR = "black"
# SNAKE_COLOR = "green"
# FOOD_COLOR = "red"

# class SnakeGame:
#     def __init__(self):
#         self.root = tk.Tk()
#         self.root.title("Snake Game")
        
#         self.canvas = tk.Canvas(self.root, width=WIDTH, height=HEIGHT, bg=BG_COLOR)
#         self.canvas.pack()
        
#         self.snake = [(100, 100), (80, 100), (60, 100)]
#         self.food = self.create_food()
#         self.direction = "Right"
#         self.score = 0
        
#         self.bind_keys()
#         self.run()

#     def bind_keys(self):
#         self.root.bind("<KeyPress-Left>", self.go_left)
#         self.root.bind("<KeyPress-Right>", self.go_right)
#         self.root.bind("<KeyPress-Up>", self.go_up)
#         self.root.bind("<KeyPress-Down>", self.go_down)

#     def go_left(self, event):
#         if self.direction != "Right":
#             self.direction = "Left"

#     def go_right(self, event):
#         if self.direction != "Left":
#             self.direction = "Right"

#     def go_up(self, event):
#         if self.direction != "Down":
#             self.direction = "Up"

#     def go_down(self, event):
#         if self.direction != "Up":
#             self.direction = "Down"

#     def create_food(self):
#         x = random.randrange(0, WIDTH - SNAKE_SIZE, SNAKE_SIZE)
#         y = random.randrange(0, HEIGHT - SNAKE_SIZE, SNAKE_SIZE)
#         return x, y

#     def move(self):
#         x, y = self.snake[0]
        
#         if self.direction == "Left":
#             x -= SNAKE_SIZE
#         elif self.direction == "Right":
#             x += SNAKE_SIZE
#         elif self.direction == "Up":
#             y -= SNAKE_SIZE
#         elif self.direction == "Down":
#             y += SNAKE_SIZE
        
#         self.snake.insert(0, (x, y))

#         if (x, y) == self.food:
#             self.score += 1
#             self.food = self.create_food()
#         else:
#             self.snake.pop()

#         if self.check_collision():
#             self.game_over()
#         else:
#             self.update_canvas()

#     def check_collision(self):
#         x, y = self.snake[0]
#         return x < 0 or x >= WIDTH or y < 0 or y >= HEIGHT or (x, y) in self.snake[1:]

#     def update_canvas(self):
#         self.canvas.delete("all")

#         for segment in self.snake:
#             x, y = segment
#             self.canvas.create_rectangle(x, y, x + SNAKE_SIZE, y + SNAKE_SIZE, fill=SNAKE_COLOR)

#         self.canvas.create_oval(self.food[0], self.food[1], self.food[0] + SNAKE_SIZE, self.food[1] + SNAKE_SIZE, fill=FOOD_COLOR)

#         self.canvas.create_text(WIDTH / 2, 20, text=f"Score: {self.score}", fill="white")

#     def game_over(self):
#         self.canvas.create_text(WIDTH / 2, HEIGHT / 2, text="Game Over", fill="red")
#         self.root.after_cancel(self.game_loop)

#     def run(self):
#         self.move()
#         self.game_loop = self.root.after(int(DELAY * 1000), self.run)

#     def start(self):
#         self.root.mainloop()

# if __name__ == "__main__":
#     game = SnakeGame()
#     game.start()
