# CRUD operation using REST API [ using Flask ] in Python
# Postman is used to test the project

from flask import Flask,render_template,request

app=Flask(__name__)

books=[
    {"id":1,"title":"Mastering Python","cost":600},
    {"id":2,"title":"Inside MySQL","cost":500},
    {"id":3,"title":"Mastering Java","cost":800},
    {"id":4,"title":"Machine Learning in details","cost":900},
     ]

@app.route("/",methods=['GET'])
def get_home():
    print("Welcome Home")
    return render_template('home.html')

@app.route("/books",methods=['GET'])
def get_books():
    return books

@app.route("/book/<int:book_id>",methods=['GET'])
def get_book(book_id):
    for book in books:
        if book["id"] is book_id:
            return book
    return {"error":"Book not found"}

@app.route("/book",methods=['POST'])
def add_book():
    new_book={
        "id":request.json['id'],
        "title":request.json['title'],
        "cost":request.json['cost']
    }
    books.append(new_book)
    return {"message":"Book has been added successfully"}

@app.route("/book/<int:book_id>",methods=['PUT'])
def modify_book(book_id):
    for book in books:
        if book['id'] is book_id:
            book['title'] = request.json['title']
            book['cost'] = request.json['cost']
            return {"message": "Book has been updated successfully"}
    return {"message": "Book not found"}

@app.route("/book/<int:book_id>",methods=['DELETE'])
def delete_book(book_id):
    for book in books:
        if book['id'] is book_id:
            books.remove(book)
            return {"message": "Book has been deleted successfully"}
    return {"message": "Book not found"}

# this is to start the server
if __name__ == '__main__':
    app.run(debug=True)